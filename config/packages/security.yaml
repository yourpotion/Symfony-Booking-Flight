security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Passenger
                property: email
        oauth_hwi:
            id: hwi_oauth.user.provider
        # used to reload user from session & other features (e.g. switch_user)
        # used to reload user from session & other features (e.g. switch_user)
        # used to reload user from session & other features (e.g. switch_user)
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
            form_login: ~
            entry_point: form_login

            oauth:
                resource_owners:
                    auth0: "/auth0/callback"
                login_path: /
                failure_path: /
                default_target_path: /
                oauth_user_provider:
                    service: hwi_oauth.user.provider

            remember_me:
                secret: "%kernel.secret%"
                lifetime: 604800
                path: /
                always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    role_hierarchy:
        ROLE_USER: ROLE_USER
        ROLE_GATE_MANAGER: [ROLE_USER]
        ROLE_CHECK_IN_MANAGER: [ROLE_GATE_MANAGER]
        ROLE_SUPERVISOR: [ROLE_CHECK_IN_MANAGER]
    access_control:
        # matches /admin/users/*
        - { path: '^/create/flight', roles: ROLE_SUPERVISOR }

        - {path: '^/boarding/register', roles: ROLE_GATE_MANAGER}

        # matches /admin/* except for anything matching the above rule
        - { path: '^/boarding/supervisor', roles:  ROLE_SUPERVISOR }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
